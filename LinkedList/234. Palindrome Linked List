Given a singly linked list, determine if it is a palindrome.

Example 1:

Input: 1->2
Output: false
Example 2:

Input: 1->2->2->1
Output: true
Follow up:
Could you do it in O(n) time and O(1) space?

------------------------------------------------------------

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public boolean isPalindrome(ListNode head) {
        ListNode fast = head;
        ListNode slow = head;
        Stack<Integer> s = new Stack<Integer>();
        while(fast!=null && fast.next!=null){
            s.push(slow.val);
            slow = slow.next;
            fast = fast.next.next;
        }
        
        //if odd number of elements, skip the middle element
        if(fast!=null){
            slow = slow.next;
        }
        
        while(slow!=null){
            int top = s.pop();
            if(top!=slow.val) return false;
            slow = slow.next;
        }
        
        return true;
            
    }
}
