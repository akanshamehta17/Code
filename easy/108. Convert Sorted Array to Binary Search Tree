For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.

Example:

Given the sorted array: [-10,-3,0,5,9],

One possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:

      0
     / \
   -3   9
   /   /
 -10  5
 ------------------------------------------------------------------------------
 
 /**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode sortedArrayToBST(int[] nums) {
        //if(nums.length==0) return null;
        
        TreeNode root = createBST(nums,0,nums.length-1);
        return root;
        
    }
    
     public TreeNode createBST(int[] nums, int start, int end){
          if(end < start) return null;
          int mid = (start+end)/2;
         //System.out.println(p);
          TreeNode n = new TreeNode(nums[mid]);
          n.left = createBST(nums,start,mid-1);
          n.right = createBST(nums,mid+1,end);
          return n;
    }
}
